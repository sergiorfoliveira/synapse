{
	"name": "SQL script 10",
	"properties": {
		"content": {
			"query": "/*============================================================================\n  File:     instawdb.sql\n\n  Summary:  Creates the AdventureWorksDW sample database. Run this on\n  any version of SQL Server (2008R2 or later) to get AdventureWorksDW for your\n  current version.  \n\n  Date:     October 26, 2017\n  Updated:  October 26, 2017\n\n------------------------------------------------------------------------------\n  This file is part of the Microsoft SQL Server Code Samples.\n\n  Copyright (C) Microsoft Corporation.  All rights reserved.\n\n  This source code is intended only as a supplement to Microsoft\n  Development Tools and/or on-line documentation.  See these other\n  materials for detailed information regarding Microsoft code samples.\n\n  All data in this database is ficticious.\n  \n  THIS CODE AND INFORMATION ARE PROVIDED \"AS IS\" WITHOUT WARRANTY OF ANY\n  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE\n  IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A\n  PARTICULAR PURPOSE.\n============================================================================*/\n\n/*\n * HOW TO RUN THIS SCRIPT:\n *\n * 1. Enable full-text search on your SQL Server instance. \n *\n * 2. Open the script inside SQL Server Management Studio and enable SQLCMD mode. \n *    This option is in the Query menu.\n *\n * 3. Copy this script and the install files to C:\\Samples\\AdventureWorksDW, or\n *    set the following environment variable to your own data path.\n */\n :setvar SqlSamplesSourceDataPath \"abfss://fssynapse30062022@sasynapse30062022.dfs.core.windows.net/AdventureWorksCSV/\"\n\n/*\n * 4. Append the SQL Server version number to database name if you want to\n *    differentiate it from other installs of AdventureWorksDW\n */\n\n:setvar DatabaseName \"AdventureWorksDW\"\n\n/* Execute the script\n */\n\nIF '$(SqlSamplesSourceDataPath)' IS NULL OR '$(SqlSamplesSourceDataPath)' = ''\nBEGIN\n\tRAISERROR(N'The variable SqlSamplesSourceDataPath must be defined.', 16, 127) WITH NOWAIT\n\tRETURN\nEND;\n\n\nSET NOCOUNT OFF;\nGO\n\nPRINT CONVERT(varchar(1000), @@VERSION);\nGO\n\nPRINT '';\nPRINT 'Started - ' + CONVERT(varchar, GETDATE(), 121);\nGO\n\nUSE [master];\nGO\n\n\n-- ****************************************\n-- Drop Database\n-- ****************************************\nPRINT '';\nPRINT '*** Dropping Database';\nGO\n\nIF EXISTS (SELECT [name] FROM [master].[sys].[databases] WHERE [name] = N'$(DatabaseName)')\n    DROP DATABASE $(DatabaseName);\n\n-- If the database has any other open connections close the network connection.\nIF @@ERROR = 3702 \n    RAISERROR('$(DatabaseName) database cannot be dropped because there are still other open connections', 127, 127) WITH NOWAIT, LOG;\nGO\n\n-- ****************************************\n-- Create Database\n-- ****************************************\nPRINT '';\nPRINT '*** Creating Database';\nGO\n\nCREATE DATABASE $(DatabaseName);\nGO\n\nPRINT '';\nPRINT '*** Checking for $(DatabaseName) Database';\n/* CHECK FOR DATABASE IF IT DOESN'T EXISTS, DO NOT RUN THE REST OF THE SCRIPT */\nIF NOT EXISTS (SELECT TOP 1 1 FROM sys.databases WHERE name = N'$(DatabaseName)')\nBEGIN\nPRINT '*******************************************************************************************************************************************************************'\n+char(10)+'********$(DatabaseName) Database does not exist.  Make sure that the script is being run in SQLCMD mode and that the variables have been correctly set.*********'\n+char(10)+'*******************************************************************************************************************************************************************';\nSET NOEXEC ON;\nEND\nGO\n\nALTER DATABASE $(DatabaseName) \nSET RECOVERY SIMPLE, \n    ANSI_NULLS ON, \n    ANSI_PADDING ON, \n    ANSI_WARNINGS ON, \n    ARITHABORT ON, \n    CONCAT_NULL_YIELDS_NULL ON, \n    QUOTED_IDENTIFIER ON, \n    NUMERIC_ROUNDABORT OFF, \n    PAGE_VERIFY CHECKSUM, \n    ALLOW_SNAPSHOT_ISOLATION OFF;\nGO\n\nUSE $(DatabaseName);\nGO\n\n\n-- ****************************************\n-- Create DDL Trigger for Database\n-- ****************************************\nPRINT '';\nPRINT '*** Creating DDL Trigger for Database';\nGO\n\n-- Create table to store database object creation messages\n-- *** WARNING:  THIS TABLE IS INTENTIONALLY A HEAP - DO NOT ADD A PRIMARY KEY ***\nCREATE TABLE [dbo].[DatabaseLog](\n    [DatabaseLogID] [int] IDENTITY (1, 1) NOT NULL,\n    [PostTime] [datetime] NOT NULL, \n    [DatabaseUser] [sysname] NOT NULL, \n    [Event] [sysname] NOT NULL, \n    [Schema] [sysname] NULL, \n    [Object] [sysname] NULL, \n    [TSQL] [nvarchar](max) NOT NULL, \n    [XmlEvent] [xml] NOT NULL\n) ON [PRIMARY];\nGO\n\nCREATE TRIGGER [ddlDatabaseTriggerLog] ON DATABASE \nFOR DDL_DATABASE_LEVEL_EVENTS AS \nBEGIN\n    SET NOCOUNT ON;\n\n    DECLARE @data XML;\n    DECLARE @schema sysname;\n    DECLARE @object sysname;\n    DECLARE @eventType sysname;\n\n    SET @data = EVENTDATA();\n    SET @eventType = @data.value('(/EVENT_INSTANCE/EventType)[1]', 'sysname');\n    SET @schema = @data.value('(/EVENT_INSTANCE/SchemaName)[1]', 'sysname');\n    SET @object = @data.value('(/EVENT_INSTANCE/ObjectName)[1]', 'sysname') \n\n    IF @object IS NOT NULL\n        PRINT '  ' + @eventType + ' - ' + @schema + '.' + @object;\n    ELSE\n        PRINT '  ' + @eventType + ' - ' + @schema;\n\n    IF @eventType IS NULL\n        PRINT CONVERT(nvarchar(max), @data);\n\n    INSERT [dbo].[DatabaseLog] \n        (\n        [PostTime], \n        [DatabaseUser], \n        [Event], \n        [Schema], \n        [Object], \n        [TSQL], \n        [XmlEvent]\n        ) \n    VALUES \n        (\n        GETDATE(), \n        CONVERT(sysname, CURRENT_USER), \n        @eventType, \n        CONVERT(sysname, @schema), \n        CONVERT(sysname, @object), \n        @data.value('(/EVENT_INSTANCE/TSQLCommand)[1]', 'nvarchar(max)'), \n        @data\n        );\nEND;\nGO\n\n\n\n-- ******************************************************\n-- Create User Defined Functions\n-- ******************************************************\n-- Builds an ISO 8601 format date from a year, month, and day specified as integers.\n-- This format of date should parse correctly regardless of SET DATEFORMAT and SET LANGUAGE.\n-- See SQL Server Books Online for more details.\nCREATE FUNCTION [dbo].[udfBuildISO8601Date] (@year int, @month int, @day int)\nRETURNS datetime\nAS \nBEGIN\n\tRETURN cast(convert(varchar, @year) + '-' + [dbo].[udfTwoDigitZeroFill](@month) \n\t    + '-' + [dbo].[udfTwoDigitZeroFill](@day) + 'T00:00:00' \n\t    as datetime);\nEND;\nGO\n\n\nCREATE FUNCTION [dbo].[udfMinimumDate] (\n    @x DATETIME, \n    @y DATETIME\n) RETURNS DATETIME\nAS\nBEGIN\n    DECLARE @z DATETIME\n\n    IF @x <= @y \n        SET @z = @x \n    ELSE \n        SET @z = @y\n\n    RETURN(@z)\nEND;\nGO\n\n-- Converts the specified integer (which should be < 100 and > -1)\n-- into a two character string, zero filling from the left \n-- if the number is < 10.\nCREATE FUNCTION [dbo].[udfTwoDigitZeroFill] (@number int) \nRETURNS char(2)\nAS\nBEGIN\n\tDECLARE @result char(2);\n\tIF @number > 9 \n\t\tSET @result = convert(char(2), @number);\n\tELSE\n\t\tSET @result = convert(char(2), '0' + convert(varchar, @number));\n\tRETURN @result;\nEND;\nGO\n\n-- ******************************************************\n-- Create tables\n-- ******************************************************\nPRINT '';\nPRINT '*** Creating Tables';\nGO\n\nCREATE TABLE [dbo].[AdventureWorksDWBuildVersion](\n\t[DBVersion] [nvarchar](50) NULL,\n\t[VersionDate] [datetime] NULL\n) ON [PRIMARY];\nGO\n\nCREATE TABLE [dbo].[DimAccount](\n\t[AccountKey] [int] IDENTITY(1,1) NOT NULL,\n\t[ParentAccountKey] [int] NULL,\n\t[AccountCodeAlternateKey] [int] NULL,\n\t[ParentAccountCodeAlternateKey] [int] NULL,\n\t[AccountDescription] [nvarchar](50) NULL,\n\t[AccountType] [nvarchar](50) NULL,\n\t[Operator] [nvarchar](50) NULL,\n\t[CustomMembers] [nvarchar](300) NULL,\n\t[ValueType] [nvarchar](50) NULL,\n\t[CustomMemberOptions] [nvarchar](200) NULL \n) ON [PRIMARY];\nGO\n\nCREATE TABLE [dbo].[DimCurrency](\n\t[CurrencyKey] [int] IDENTITY(1,1) NOT NULL,\n\t[CurrencyAlternateKey] [nchar](3) NOT NULL,\n\t[CurrencyName] [nvarchar](50) NOT NULL\n) ON [PRIMARY];\nGO\n\nCREATE TABLE [dbo].[DimCustomer](\n\t[CustomerKey] [int] IDENTITY(1,1) NOT NULL,\n\t[GeographyKey] [int] NULL,\n\t[CustomerAlternateKey] [nvarchar](15) NOT NULL,\n\t[Title] [nvarchar](8) NULL,\n\t[FirstName] [nvarchar](50) NULL,\n\t[MiddleName] [nvarchar](50) NULL,\n\t[LastName] [nvarchar](50) NULL,\n\t[NameStyle] [bit] NULL,\n\t[BirthDate] [date] NULL,\n\t[MaritalStatus] [nchar](1) NULL,\n\t[Suffix] [nvarchar](10) NULL,\n\t[Gender] [nvarchar](1) NULL,\n\t[EmailAddress] [nvarchar](50) NULL,\n\t[YearlyIncome] [money] NULL,\n\t[TotalChildren] [tinyint] NULL,\n\t[NumberChildrenAtHome] [tinyint] NULL,\n\t[EnglishEducation] [nvarchar](40) NULL,\n\t[SpanishEducation] [nvarchar](40) NULL,\n\t[FrenchEducation] [nvarchar](40) NULL,\n\t[EnglishOccupation] [nvarchar](100) NULL,\n\t[SpanishOccupation] [nvarchar](100) NULL,\n\t[FrenchOccupation] [nvarchar](100) NULL,\n\t[HouseOwnerFlag] [nchar](1) NULL,\n\t[NumberCarsOwned] [tinyint] NULL,\n\t[AddressLine1] [nvarchar](120) NULL,\n\t[AddressLine2] [nvarchar](120) NULL,\n\t[Phone] [nvarchar](20) NULL,\n\t[DateFirstPurchase] [date] NULL,\n\t[CommuteDistance] [nvarchar](15) NULL\n) ON [PRIMARY];\nGO\n\nCREATE TABLE [dbo].[DimDate](\n\t[DateKey] [int] NOT NULL,\n\t[FullDateAlternateKey] [date] NOT NULL,\n\t[DayNumberOfWeek] [tinyint] NOT NULL,\n\t[EnglishDayNameOfWeek] [nvarchar](10) NOT NULL,\n\t[SpanishDayNameOfWeek] [nvarchar](10) NOT NULL,\n\t[FrenchDayNameOfWeek] [nvarchar](10) NOT NULL,\n\t[DayNumberOfMonth] [tinyint] NOT NULL,\n\t[DayNumberOfYear] [smallint] NOT NULL,\n\t[WeekNumberOfYear] [tinyint] NOT NULL,\n\t[EnglishMonthName] [nvarchar](10) NOT NULL,\n\t[SpanishMonthName] [nvarchar](10) NOT NULL,\n\t[FrenchMonthName] [nvarchar](10) NOT NULL,\n\t[MonthNumberOfYear] [tinyint] NOT NULL,\n\t[CalendarQuarter] [tinyint] NOT NULL,\n\t[CalendarYear] [smallint] NOT NULL,\n\t[CalendarSemester] [tinyint] NOT NULL,\n\t[FiscalQuarter] [tinyint] NOT NULL,\n\t[FiscalYear] [smallint] NOT NULL,\n\t[FiscalSemester] [tinyint] NOT NULL\n) ON [PRIMARY];\nGO\n\nCREATE TABLE [dbo].[DimDepartmentGroup](\n\t[DepartmentGroupKey] [int] IDENTITY(1,1) NOT NULL,\n\t[ParentDepartmentGroupKey] [int] NULL,\n\t[DepartmentGroupName] [nvarchar](50) NULL\n) ON [PRIMARY];\nGO\n\nCREATE TABLE [dbo].[DimEmployee](\n\t[EmployeeKey] [int] IDENTITY(1,1) NOT NULL,\n\t[ParentEmployeeKey] [int] NULL,\n\t[EmployeeNationalIDAlternateKey] [nvarchar](15) NULL,\n\t[ParentEmployeeNationalIDAlternateKey] [nvarchar](15) NULL,\n\t[SalesTerritoryKey] [int] NULL,\n\t[FirstName] [nvarchar](50) NOT NULL,\n\t[LastName] [nvarchar](50) NOT NULL,\n\t[MiddleName] [nvarchar](50) NULL,\n\t[NameStyle] [bit] NOT NULL,\n\t[Title] [nvarchar](50) NULL,\n\t[HireDate] [date] NULL,\n\t[BirthDate] [date] NULL,\n\t[LoginID] [nvarchar](256) NULL,\n\t[EmailAddress] [nvarchar](50) NULL,\n\t[Phone] [nvarchar](25) NULL,\n\t[MaritalStatus] [nchar](1) NULL,\n\t[EmergencyContactName] [nvarchar](50) NULL,\n\t[EmergencyContactPhone] [nvarchar](25) NULL,\n\t[SalariedFlag] [bit] NULL,\n\t[Gender] [nchar](1) NULL,\n\t[PayFrequency] [tinyint] NULL,\n\t[BaseRate] [money] NULL,\n\t[VacationHours] [smallint] NULL,\n\t[SickLeaveHours] [smallint] NULL,\n\t[CurrentFlag] [bit] NOT NULL,\n\t[SalesPersonFlag] [bit] NOT NULL,\n\t[DepartmentName] [nvarchar](50) NULL,\n\t[StartDate] [date] NULL,\n\t[EndDate] [date] NULL,\n\t[Status] [nvarchar](50) NULL,\n\t[EmployeePhoto] [varbinary](max) NULL\n) ON [PRIMARY];\nGO\n\nCREATE TABLE [dbo].[DimGeography](\n\t[GeographyKey] [int] IDENTITY(1,1) NOT NULL,\n\t[City] [nvarchar](30) NULL,\n\t[StateProvinceCode] [nvarchar](3) NULL,\n\t[StateProvinceName] [nvarchar](50) NULL,\n\t[CountryRegionCode] [nvarchar](3) NULL,\n\t[EnglishCountryRegionName] [nvarchar](50) NULL,\n\t[SpanishCountryRegionName] [nvarchar](50) NULL,\n\t[FrenchCountryRegionName] [nvarchar](50) NULL,\n\t[PostalCode] [nvarchar](15) NULL,\n\t[SalesTerritoryKey] [int] NULL,\n\t[IpAddressLocator] [nvarchar](15) NULL\n) ON [PRIMARY];\nGO\n\nCREATE TABLE [dbo].[DimOrganization](\n\t[OrganizationKey] [int] IDENTITY(1,1) NOT NULL,\n\t[ParentOrganizationKey] [int] NULL,\n\t[PercentageOfOwnership] [nvarchar](16) NULL,\n\t[OrganizationName] [nvarchar](50) NULL,\n\t[CurrencyKey] [int] NULL\n) ON [PRIMARY];\nGO\n\nCREATE TABLE [dbo].[DimProduct](\n\t[ProductKey] [int] IDENTITY(1,1) NOT NULL,\n\t[ProductAlternateKey] [nvarchar](25) NULL,\n\t[ProductSubcategoryKey] [int] NULL,\n\t[WeightUnitMeasureCode] [nchar](3) NULL,\n\t[SizeUnitMeasureCode] [nchar](3) NULL,\n\t[EnglishProductName] [nvarchar](50) NOT NULL,\n\t[SpanishProductName] [nvarchar](50) NOT NULL,\n\t[FrenchProductName] [nvarchar](50) NOT NULL,\n\t[StandardCost] [money] NULL,\n\t[FinishedGoodsFlag] [bit] NOT NULL,\n\t[Color] [nvarchar](15) NOT NULL,\n\t[SafetyStockLevel] [smallint] NULL,\n\t[ReorderPoint] [smallint] NULL,\n\t[ListPrice] [money] NULL,\n\t[Size] [nvarchar](50) NULL,\n\t[SizeRange] [nvarchar](50) NULL,\n\t[Weight] [float] NULL,\n\t[DaysToManufacture] [int] NULL,\n\t[ProductLine] [nchar](2) NULL,\n\t[DealerPrice] [money] NULL,\n\t[Class] [nchar](2) NULL,\n\t[Style] [nchar](2) NULL,\n\t[ModelName] [nvarchar](50) NULL,\n\t[LargePhoto] [varbinary](max) NULL,\n\t[EnglishDescription] [nvarchar](400) NULL,\n\t[FrenchDescription] [nvarchar](400) NULL,\n\t[ChineseDescription] [nvarchar](400) NULL,\n\t[ArabicDescription] [nvarchar](400) NULL,\n\t[HebrewDescription] [nvarchar](400) NULL,\n\t[ThaiDescription] [nvarchar](400) NULL,\n\t[GermanDescription] [nvarchar](400) NULL,\n\t[JapaneseDescription] [nvarchar](400) NULL,\n\t[TurkishDescription] [nvarchar](400) NULL,\n\t[StartDate] [datetime] NULL,\n\t[EndDate] [datetime] NULL,\n\t[Status] [nvarchar](7) NULL\n) ON [PRIMARY];\nGO\n\nCREATE TABLE [dbo].[DimProductCategory](\n\t[ProductCategoryKey] [int] IDENTITY(1,1) NOT NULL,\n\t[ProductCategoryAlternateKey] [int] NULL,\n\t[EnglishProductCategoryName] [nvarchar](50) NOT NULL,\n\t[SpanishProductCategoryName] [nvarchar](50) NOT NULL,\n\t[FrenchProductCategoryName] [nvarchar](50) NOT NULL\n) ON [PRIMARY];\nGO\n\nCREATE TABLE [dbo].[DimProductSubcategory](\n\t[ProductSubcategoryKey] [int] IDENTITY(1,1) NOT NULL,\n\t[ProductSubcategoryAlternateKey] [int] NULL,\n\t[EnglishProductSubcategoryName] [nvarchar](50) NOT NULL,\n\t[SpanishProductSubcategoryName] [nvarchar](50) NOT NULL,\n\t[FrenchProductSubcategoryName] [nvarchar](50) NOT NULL,\n\t[ProductCategoryKey] [int] NULL\n) ON [PRIMARY];\nGO\n\nCREATE TABLE [dbo].[DimPromotion](\n\t[PromotionKey] [int] IDENTITY(1,1) NOT NULL,\n\t[PromotionAlternateKey] [int] NULL,\n\t[EnglishPromotionName] [nvarchar](255) NULL,\n\t[SpanishPromotionName] [nvarchar](255) NULL,\n\t[FrenchPromotionName] [nvarchar](255) NULL,\n\t[DiscountPct] [float] NULL,\n\t[EnglishPromotionType] [nvarchar](50) NULL,\n\t[SpanishPromotionType] [nvarchar](50) NULL,\n\t[FrenchPromotionType] [nvarchar](50) NULL,\n\t[EnglishPromotionCategory] [nvarchar](50) NULL,\n\t[SpanishPromotionCategory] [nvarchar](50) NULL,\n\t[FrenchPromotionCategory] [nvarchar](50) NULL,\n\t[StartDate] [datetime] NOT NULL,\n\t[EndDate] [datetime] NULL,\n\t[MinQty] [int] NULL,\n\t[MaxQty] [int] NULL\n) ON [PRIMARY];\nGO\n\nCREATE TABLE [dbo].[DimReseller](\n\t[ResellerKey] [int] IDENTITY(1,1) NOT NULL,\n\t[GeographyKey] [int] NULL,\n\t[ResellerAlternateKey] [nvarchar](15) NULL,\n\t[Phone] [nvarchar](25) NULL,\n\t[BusinessType] [varchar](20) NOT NULL,\n\t[ResellerName] [nvarchar](50) NOT NULL,\n\t[NumberEmployees] [int] NULL,\n\t[OrderFrequency] [char](1) NULL,\n\t[OrderMonth] [tinyint] NULL,\n\t[FirstOrderYear] [int] NULL,\n\t[LastOrderYear] [int] NULL,\n\t[ProductLine] [nvarchar](50) NULL,\n\t[AddressLine1] [nvarchar](60) NULL,\n\t[AddressLine2] [nvarchar](60) NULL,\n\t[AnnualSales] [money] NULL,\n\t[BankName] [nvarchar](50) NULL,\n\t[MinPaymentType] [tinyint] NULL,\n\t[MinPaymentAmount] [money] NULL,\n\t[AnnualRevenue] [money] NULL,\n\t[YearOpened] [int] NULL\n) ON [PRIMARY];\nGO\n\nCREATE TABLE [dbo].[DimSalesReason](\n\t[SalesReasonKey] [int] IDENTITY(1,1) NOT NULL,\n\t[SalesReasonAlternateKey] [int] NOT NULL,\n\t[SalesReasonName] [nvarchar](50) NOT NULL,\n\t[SalesReasonReasonType] [nvarchar](50) NOT NULL\n) ON [PRIMARY];\nGO\n\nCREATE TABLE [dbo].[DimSalesTerritory](\n\t[SalesTerritoryKey] [int] IDENTITY(1,1) NOT NULL,\n\t[SalesTerritoryAlternateKey] [int] NULL,\n\t[SalesTerritoryRegion] [nvarchar](50) NOT NULL,\n\t[SalesTerritoryCountry] [nvarchar](50) NOT NULL,\n\t[SalesTerritoryGroup] [nvarchar](50) NULL,\n\t[SalesTerritoryImage] [varbinary](max) NULL\n) ON [PRIMARY];\nGO\n\nCREATE TABLE [dbo].[DimScenario](\n\t[ScenarioKey] [int] IDENTITY(1,1) NOT NULL,\n\t[ScenarioName] [nvarchar](50) NULL\n) ON [PRIMARY];\nGO\n\nCREATE TABLE [dbo].[FactAdditionalInternationalProductDescription](\n\t[ProductKey] [int] NOT NULL,\n\t[CultureName] [nvarchar](50) NOT NULL,\n\t[ProductDescription] [nvarchar](max) NOT NULL\n) ON [PRIMARY];\nGO\n\nCREATE TABLE [dbo].[FactCallCenter](\n\t[FactCallCenterID] [int] IDENTITY(1,1) NOT NULL,\n\t[DateKey] [int] NOT NULL,\n\t[WageType] [nvarchar](15) NOT NULL,\n\t[Shift] [nvarchar](20) NOT NULL,\n\t[LevelOneOperators] [smallint] NOT NULL,\n\t[LevelTwoOperators] [smallint] NOT NULL,\n\t[TotalOperators] [smallint] NOT NULL,\n\t[Calls] [int] NOT NULL,\n\t[AutomaticResponses] [int] NOT NULL,\n\t[Orders] [int] NOT NULL,\n\t[IssuesRaised] [smallint] NOT NULL,\n\t[AverageTimePerIssue] [smallint] NOT NULL,\n\t[ServiceGrade] [float] NOT NULL,\n\t[Date] [datetime] NULL\n) ON [PRIMARY];\nGO\n\nCREATE TABLE [dbo].[FactCurrencyRate](\n\t[CurrencyKey] [int] NOT NULL,\n\t[DateKey] [int] NOT NULL,\n\t[AverageRate] [float] NOT NULL,\n\t[EndOfDayRate] [float] NOT NULL,\n\t[Date] [datetime] NULL\n) ON [PRIMARY];\nGO\n\nCREATE TABLE [dbo].[FactFinance](\n\t[FinanceKey] [int] IDENTITY(1,1) NOT NULL,\n\t[DateKey] [int] NOT NULL,\n\t[OrganizationKey] [int] NOT NULL,\n\t[DepartmentGroupKey] [int] NOT NULL,\n\t[ScenarioKey] [int] NOT NULL,\n\t[AccountKey] [int] NOT NULL,\n\t[Amount] [float] NOT NULL,\n\t[Date] [datetime] NULL\n) ON [PRIMARY];\nGO\n\nCREATE TABLE [dbo].[FactInternetSales](\n\t[ProductKey] [int] NOT NULL,\n\t[OrderDateKey] [int] NOT NULL,\n\t[DueDateKey] [int] NOT NULL,\n\t[ShipDateKey] [int] NOT NULL,\n\t[CustomerKey] [int] NOT NULL,\n\t[PromotionKey] [int] NOT NULL,\n\t[CurrencyKey] [int] NOT NULL,\n\t[SalesTerritoryKey] [int] NOT NULL,\n\t[SalesOrderNumber] [nvarchar](20) NOT NULL,\n\t[SalesOrderLineNumber] [tinyint] NOT NULL,\n\t[RevisionNumber] [tinyint] NOT NULL,\n\t[OrderQuantity] [smallint] NOT NULL,\n\t[UnitPrice] [money] NOT NULL,\n\t[ExtendedAmount] [money] NOT NULL,\n\t[UnitPriceDiscountPct] [float] NOT NULL,\n\t[DiscountAmount] [float] NOT NULL,\n\t[ProductStandardCost] [money] NOT NULL,\n\t[TotalProductCost] [money] NOT NULL,\n\t[SalesAmount] [money] NOT NULL,\n\t[TaxAmt] [money] NOT NULL,\n\t[Freight] [money] NOT NULL,\n\t[CarrierTrackingNumber] [nvarchar](25) NULL,\n\t[CustomerPONumber] [nvarchar](25) NULL,\n\t[OrderDate] [datetime] NULL,\n\t[DueDate] [datetime] NULL,\n\t[ShipDate] [datetime] NULL\n) ON [PRIMARY];\nGO\n\nCREATE TABLE [dbo].[FactInternetSalesReason](\n\t[SalesOrderNumber] [nvarchar](20) NOT NULL,\n\t[SalesOrderLineNumber] [tinyint] NOT NULL,\n\t[SalesReasonKey] [int] NOT NULL\n) ON [PRIMARY];\nGO\n\nCREATE TABLE [dbo].[FactProductInventory](\n\t[ProductKey] [int] NOT NULL,\n\t[DateKey] [int] NOT NULL,\n\t[MovementDate] [date] NOT NULL,\n\t[UnitCost] [money] NOT NULL,\n\t[UnitsIn] [int] NOT NULL,\n\t[UnitsOut] [int] NOT NULL,\n\t[UnitsBalance] [int] NOT NULL\n) ON [PRIMARY];\nGO\n\nCREATE TABLE [dbo].[FactResellerSales](\n\t[ProductKey] [int] NOT NULL,\n\t[OrderDateKey] [int] NOT NULL,\n\t[DueDateKey] [int] NOT NULL,\n\t[ShipDateKey] [int] NOT NULL,\n\t[ResellerKey] [int] NOT NULL,\n\t[EmployeeKey] [int] NOT NULL,\n\t[PromotionKey] [int] NOT NULL,\n\t[CurrencyKey] [int] NOT NULL,\n\t[SalesTerritoryKey] [int] NOT NULL,\n\t[SalesOrderNumber] [nvarchar](20) NOT NULL,\n\t[SalesOrderLineNumber] [tinyint] NOT NULL,\n\t[RevisionNumber] [tinyint] NULL,\n\t[OrderQuantity] [smallint] NULL,\n\t[UnitPrice] [money] NULL,\n\t[ExtendedAmount] [money] NULL,\n\t[UnitPriceDiscountPct] [float] NULL,\n\t[DiscountAmount] [float] NULL,\n\t[ProductStandardCost] [money] NULL,\n\t[TotalProductCost] [money] NULL,\n\t[SalesAmount] [money] NULL,\n\t[TaxAmt] [money] NULL,\n\t[Freight] [money] NULL,\n\t[CarrierTrackingNumber] [nvarchar](25) NULL,\n\t[CustomerPONumber] [nvarchar](25) NULL,\n\t[OrderDate] [datetime] NULL,\n\t[DueDate] [datetime] NULL,\n\t[ShipDate] [datetime] NULL\n) ON [PRIMARY];\nGO\n\nCREATE TABLE [dbo].[FactSalesQuota](\n\t[SalesQuotaKey] [int] IDENTITY(1,1) NOT NULL,\n\t[EmployeeKey] [int] NOT NULL,\n\t[DateKey] [int] NOT NULL,\n\t[CalendarYear] [smallint] NOT NULL,\n\t[CalendarQuarter] [tinyint] NOT NULL,\n\t[SalesAmountQuota] [money] NOT NULL,\n\t[Date] [datetime] NULL\n) ON [PRIMARY];\nGO\n\nCREATE TABLE [dbo].[FactSurveyResponse](\n\t[SurveyResponseKey] [int] IDENTITY(1,1) NOT NULL,\n\t[DateKey] [int] NOT NULL,\n\t[CustomerKey] [int] NOT NULL,\n\t[ProductCategoryKey] [int] NOT NULL,\n\t[EnglishProductCategoryName] [nvarchar](50) NOT NULL,\n\t[ProductSubcategoryKey] [int] NOT NULL,\n\t[EnglishProductSubcategoryName] [nvarchar](50) NOT NULL,\n\t[Date] [datetime] NULL\n) ON [PRIMARY];\nGO\n\nCREATE TABLE [dbo].[NewFactCurrencyRate](\n\t[AverageRate] [real] NULL,\n\t[CurrencyID] [nvarchar](3) NULL,\n\t[CurrencyDate] [date] NULL,\n\t[EndOfDayRate] [real] NULL,\n\t[CurrencyKey] [int] NULL,\n\t[DateKey] [int] NULL\n) ON [PRIMARY];\nGO\n\nCREATE TABLE [dbo].[ProspectiveBuyer](\n\t[ProspectiveBuyerKey] [int] IDENTITY(1,1) NOT NULL,\n\t[ProspectAlternateKey] [nvarchar](15) NULL,\n\t[FirstName] [nvarchar](50) NULL,\n\t[MiddleName] [nvarchar](50) NULL,\n\t[LastName] [nvarchar](50) NULL,\n\t[BirthDate] [datetime] NULL,\n\t[MaritalStatus] [nchar](1) NULL,\n\t[Gender] [nvarchar](1) NULL,\n\t[EmailAddress] [nvarchar](50) NULL,\n\t[YearlyIncome] [money] NULL,\n\t[TotalChildren] [tinyint] NULL,\n\t[NumberChildrenAtHome] [tinyint] NULL,\n\t[Education] [nvarchar](40) NULL,\n\t[Occupation] [nvarchar](100) NULL,\n\t[HouseOwnerFlag] [nchar](1) NULL,\n\t[NumberCarsOwned] [tinyint] NULL,\n\t[AddressLine1] [nvarchar](120) NULL,\n\t[AddressLine2] [nvarchar](120) NULL,\n\t[City] [nvarchar](30) NULL,\n\t[StateProvinceCode] [nvarchar](3) NULL,\n\t[PostalCode] [nvarchar](15) NULL,\n\t[Phone] [nvarchar](20) NULL,\n\t[Salutation] [nvarchar](8) NULL,\n\t[Unknown] [int] NULL\n) ON [PRIMARY];\nGO\n\n\nCREATE TABLE [dbo].[sysdiagrams](\n\t[name] [sysname] NOT NULL,\n\t[principal_id] [int] NOT NULL,\n\t[diagram_id] [int] IDENTITY(1,1) NOT NULL,\n\t[version] [int] NULL,\n\t[definition] [varbinary](max) NULL\n\t) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]\n\nGO\n\nSET ANSI_PADDING ON\nGO\n\nEXEC sys.sp_addextendedproperty @name=N'microsoft_database_tools_support', @value=1 , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'sysdiagrams'\nGO\n\n\n-- ******************************************************\n-- Load data\n-- ******************************************************\nPRINT '';\nPRINT '*** Loading Data';\nGO\n\nPRINT 'Loading [dbo].[AdventureWorksDWBuildVersion]';\n\nINSERT INTO [dbo].[AdventureWorksDWBuildVersion] \nVALUES\n( CONVERT(nvarchar(50), SERVERPROPERTY('ProductVersion')), CONVERT(datetime, SERVERPROPERTY('ResourceLastUpdateDateTime')));\n\n\nPRINT 'Loading [dbo].[DimAccount]';\n\nBULK INSERT [dbo].[DimAccount] FROM '$(SqlSamplesSourceDataPath)DimAccount.csv'\nWITH (\n    CHECK_CONSTRAINTS,\n   -- CODEPAGE='ACP',\n    DATAFILETYPE = 'widechar',\n    FIELDTERMINATOR= '|',\n    ROWTERMINATOR = '\\n',\n    KEEPIDENTITY,\n    TABLOCK\n);\n\nPRINT 'Loading [dbo].[DimCurrency]';\n\nBULK INSERT [dbo].[DimCurrency] FROM '$(SqlSamplesSourceDataPath)DimCurrency.csv'\nWITH (\n    CHECK_CONSTRAINTS,\n   -- CODEPAGE='ACP',\n    DATAFILETYPE = 'widechar',\n    FIELDTERMINATOR= '|',\n    ROWTERMINATOR = '\\n',\n    KEEPIDENTITY,\n    TABLOCK\n);\n\nPRINT 'Loading [dbo].[DimCustomer]';\n\nBULK INSERT[dbo].[DimCustomer] FROM '$(SqlSamplesSourceDataPath)DimCustomer.csv'\nWITH (\n    CHECK_CONSTRAINTS,\n   -- CODEPAGE='ACP',\n    DATAFILETYPE='widechar',\n    FIELDTERMINATOR='|',\n    ROWTERMINATOR='\\n',\n    KEEPIDENTITY,\n    TABLOCK\n);\n\nPRINT 'Loading [dbo].[DimDate]';\n\nBULK INSERT [dbo].[DimDate] FROM '$(SqlSamplesSourceDataPath)DimDate.csv'\nWITH (\n    CHECK_CONSTRAINTS,\n    --CODEPAGE='ACP',\n    DATAFILETYPE='widechar',\n    FIELDTERMINATOR='|',\n    ROWTERMINATOR='\\n',\n    KEEPIDENTITY,\n    TABLOCK\n);\n\nPRINT 'Loading [dbo].[DimDepartmentGroup]';\n\nBULK INSERT [dbo].[DimDepartmentGroup] FROM '$(SqlSamplesSourceDataPath)DimDepartmentGroup.csv'\nWITH (\n    CHECK_CONSTRAINTS,\n    --CODEPAGE='ACP',\n    DATAFILETYPE='widechar',\n    FIELDTERMINATOR='|',\n    ROWTERMINATOR='\\n',\n    KEEPIDENTITY,\n    TABLOCK\n);\n\nPRINT 'Loading [dbo].[DimEmployee]';\n\nBULK INSERT [dbo].[DimEmployee] FROM '$(SqlSamplesSourceDataPath)DimEmployee.csv'\nWITH (\n    CHECK_CONSTRAINTS,\n   -- CODEPAGE='ACP',\n    DATAFILETYPE='widechar',\n    FIELDTERMINATOR='|',\n    ROWTERMINATOR='\\n',\n    KEEPIDENTITY,\n    TABLOCK\n);\n\nPRINT 'Loading [dbo].[DimGeography]';\n\nBULK INSERT [dbo].[DimGeography] FROM '$(SqlSamplesSourceDataPath)DimGeography.csv'\nWITH (\n    CHECK_CONSTRAINTS,\n    --CODEPAGE='ACP',\n    DATAFILETYPE='widechar',\n    FIELDTERMINATOR='|',\n    ROWTERMINATOR='\\n',\n    KEEPIDENTITY,\n    TABLOCK\n);\n\nPRINT 'Loading [dbo].[DimOrganization]';\n\nBULK INSERT [dbo].[DimOrganization] FROM '$(SqlSamplesSourceDataPath)DimOrganization.csv'\nWITH (\n    CHECK_CONSTRAINTS,\n    --CODEPAGE='ACP',\n    DATAFILETYPE='widechar',\n    FIELDTERMINATOR='|',\n    ROWTERMINATOR='\\n',\n    KEEPIDENTITY,\n    TABLOCK\n);\n\nPRINT 'Loading [dbo].[DimProduct]';\n\nBULK INSERT [dbo].[DimProduct] FROM '$(SqlSamplesSourceDataPath)DimProduct.csv'\nWITH (\n    CHECK_CONSTRAINTS,\n    --CODEPAGE='ACP',\n    DATAFILETYPE='widechar',\n    FIELDTERMINATOR='|',\n    ROWTERMINATOR='\\n',\n    KEEPIDENTITY,\n    TABLOCK\n);\n\nPRINT 'Loading [dbo].[DimProductCategory]';\n\nBULK INSERT [dbo].[DimProductCategory] FROM '$(SqlSamplesSourceDataPath)DimProductCategory.csv'\nWITH (\n    CHECK_CONSTRAINTS,\n    --CODEPAGE='ACP',\n    DATAFILETYPE='widechar',\n    FIELDTERMINATOR='|',\n    ROWTERMINATOR='\\n',\n    KEEPIDENTITY,\n    TABLOCK\n);\n\nPRINT 'Loading [dbo].[DimProductSubcategory]';\n\nBULK INSERT [dbo].[DimProductSubcategory] FROM '$(SqlSamplesSourceDataPath)DimProductSubcategory.csv'\nWITH (\n    CHECK_CONSTRAINTS,\n    --CODEPAGE='ACP',\n    DATAFILETYPE='widechar',\n    FIELDTERMINATOR='|',\n    ROWTERMINATOR='\\n',\n    KEEPIDENTITY,\n    TABLOCK\n);\n\nPRINT 'Loading [dbo].[DimPromotion]';\n\nBULK INSERT [dbo].[DimPromotion] FROM '$(SqlSamplesSourceDataPath)DimPromotion.csv'\nWITH (\n    CHECK_CONSTRAINTS,\n    --CODEPAGE='ACP',\n    DATAFILETYPE='widechar',\n    FIELDTERMINATOR='|',\n    ROWTERMINATOR='\\n',\n    KEEPIDENTITY,\n    TABLOCK\n);\n\nPRINT 'Loading [dbo].[DimReseller]';\n\nBULK INSERT [dbo].[DimReseller] FROM '$(SqlSamplesSourceDataPath)DimReseller.csv'\nWITH (\n    CHECK_CONSTRAINTS,\n    --CODEPAGE='ACP',\n    DATAFILETYPE='widechar',\n    FIELDTERMINATOR='|',\n    ROWTERMINATOR='\\n',\n    KEEPIDENTITY,\n    TABLOCK\n);\n\n\n\nPRINT 'Loading [dbo].[DimSalesReason]';\n\nBULK INSERT [dbo].[DimSalesReason] FROM '$(SqlSamplesSourceDataPath)DimSalesReason.csv'\nWITH (\n    CHECK_CONSTRAINTS,\n    --CODEPAGE='ACP',\n    DATAFILETYPE='widechar',\n    FIELDTERMINATOR='|',\n    ROWTERMINATOR='\\n',\n    KEEPIDENTITY,\n    TABLOCK\n);\n\n \nPRINT 'Loading [dbo].[DimSalesTerritory]';\n\nBULK INSERT [dbo].[DimSalesTerritory] FROM '$(SqlSamplesSourceDataPath)DimSalesTerritory.csv'\nWITH (\n    CHECK_CONSTRAINTS,\n    --CODEPAGE='ACP',\n    DATAFILETYPE='widechar',\n    FIELDTERMINATOR='|',\n    ROWTERMINATOR='\\n',\n    KEEPIDENTITY,\n    TABLOCK\n);\n\nPRINT 'Loading [dbo].[DimScenario]';\n\nBULK INSERT [dbo].[DimScenario] FROM '$(SqlSamplesSourceDataPath)DimScenario.csv'\nWITH (\n    CHECK_CONSTRAINTS,\n    --CODEPAGE='ACP',\n    DATAFILETYPE='widechar',\n    FIELDTERMINATOR='|',\n    ROWTERMINATOR='\\n',\n    KEEPIDENTITY,\n    TABLOCK\n);\n\nPRINT 'Loading [dbo].[FactAdditionalInternationalProductDescription]';\n\nBULK INSERT [dbo].[FactAdditionalInternationalProductDescription] FROM '$(SqlSamplesSourceDataPath)FactAdditionalInternationalProductDescription.csv'\nWITH (\n    CHECK_CONSTRAINTS,\n    --CODEPAGE='ACP',\n    DATAFILETYPE='widechar',\n    FIELDTERMINATOR='|',\n    ROWTERMINATOR='\\n',\n    KEEPIDENTITY,\n    TABLOCK\n);\n\nPRINT 'Loading [dbo].[FactCallCenter]';\n\nBULK INSERT [dbo].[FactCallCenter] FROM '$(SqlSamplesSourceDataPath)FactCallCenter.csv'\nWITH (\n    CHECK_CONSTRAINTS,\n    --CODEPAGE='ACP',\n    DATAFILETYPE='widechar',\n    FIELDTERMINATOR='|',\n    ROWTERMINATOR='\\n',\n    KEEPIDENTITY,\n    TABLOCK\n);\n\nPRINT 'Loading [dbo].[FactCurrencyRate]';\n\nBULK INSERT [dbo].[FactCurrencyRate] FROM '$(SqlSamplesSourceDataPath)FactCurrencyRate.csv'\nWITH (\n    CHECK_CONSTRAINTS,\n    --CODEPAGE='ACP',\n    DATAFILETYPE='widechar',\n    FIELDTERMINATOR='|',\n    ROWTERMINATOR='\\n',\n    KEEPIDENTITY,\n    TABLOCK\n);\n\nPRINT 'Loading [dbo].[FactFinance]';\n\nBULK INSERT [dbo].[FactFinance] FROM '$(SqlSamplesSourceDataPath)FactFinance.csv'\nWITH (\n    CHECK_CONSTRAINTS,\n    --CODEPAGE='ACP',\n    DATAFILETYPE='widechar',\n    FIELDTERMINATOR='|',\n    ROWTERMINATOR='\\n',\n    KEEPIDENTITY,\n    TABLOCK\n);\n\n\nPRINT 'Loading [dbo].[FactInternetSales]';\n\nBULK INSERT [dbo].[FactInternetSales] FROM '$(SqlSamplesSourceDataPath)FactInternetSales.csv'\nWITH (\n    CHECK_CONSTRAINTS,\n    --CODEPAGE='ACP',\n    DATAFILETYPE='widechar',\n    FIELDTERMINATOR='|',\n    ROWTERMINATOR='\\n',\n    KEEPIDENTITY,\n    TABLOCK\n);\n\n\nPRINT 'Loading [dbo].[FactInternetSalesReason] ';\n\nBULK INSERT [dbo].[FactInternetSalesReason] FROM '$(SqlSamplesSourceDataPath)FactInternetSalesReason.csv'\nWITH (\n    CHECK_CONSTRAINTS,\n    --CODEPAGE='ACP',\n    DATAFILETYPE='widechar',\n    FIELDTERMINATOR='|',\n    ROWTERMINATOR='\\n',\n    KEEPIDENTITY,\n    TABLOCK\n);\n\n\nPRINT 'Loading [dbo].[FactProductInventory]';\n\nBULK INSERT [dbo].[FactProductInventory] FROM '$(SqlSamplesSourceDataPath)FactProductInventory.csv'\nWITH (\n    CHECK_CONSTRAINTS,\n    --CODEPAGE='ACP',\n    DATAFILETYPE='widechar',\n    FIELDTERMINATOR='|',\n    ROWTERMINATOR='\\n',\n    KEEPIDENTITY,\n    TABLOCK\n);\n\nPRINT 'Loading [dbo].[FactResellerSales]';\n\nBULK INSERT [dbo].[FactResellerSales] FROM '$(SqlSamplesSourceDataPath)FactResellerSales.csv'\nWITH (\n    CHECK_CONSTRAINTS,\n    --ODEPAGE='ACP',\n    DATAFILETYPE='widechar',\n    FIELDTERMINATOR='|',\n    ROWTERMINATOR='\\n',\n    KEEPIDENTITY,\n    TABLOCK\n);\n\nPRINT 'Loading [dbo].[FactSalesQuota]';\n\nBULK INSERT [dbo].[FactSalesQuota] FROM '$(SqlSamplesSourceDataPath)FactSalesQuota.csv'\nWITH (\n    CHECK_CONSTRAINTS,\n    --CODEPAGE='ACP',\n    DATAFILETYPE='widechar',\n    FIELDTERMINATOR='|',\n    ROWTERMINATOR='\\n',\n    KEEPIDENTITY,\n    TABLOCK\n);\n\nPRINT 'Loading [dbo].[FactSurveyResponse]';\n\nBULK INSERT [dbo].[FactSurveyResponse] FROM '$(SqlSamplesSourceDataPath)FactSurveyResponse.csv'\nWITH (\n    CHECK_CONSTRAINTS,\n   -- CODEPAGE='ACP',\n    DATAFILETYPE='widechar',\n    FIELDTERMINATOR='|',\n    ROWTERMINATOR='\\n',\n    KEEPIDENTITY,\n    TABLOCK\n);\n\nPRINT 'Loading [dbo].[NewFactCurrencyRate]';\n\nBULK INSERT [dbo].[NewFactCurrencyRate] FROM '$(SqlSamplesSourceDataPath)NewFactCurrencyRate.csv'\nWITH (\n    CHECK_CONSTRAINTS,\n    --CODEPAGE='ACP',\n    DATAFILETYPE='widechar',\n    FIELDTERMINATOR='|',\n    ROWTERMINATOR='\\n',\n    KEEPIDENTITY,\n    TABLOCK\n);\n\n\nPRINT 'Loading [dbo].[ProspectiveBuyer]';\n\nBULK INSERT [dbo].[ProspectiveBuyer] FROM '$(SqlSamplesSourceDataPath)ProspectiveBuyer.csv'\nWITH (\n    CHECK_CONSTRAINTS,\n    CODEPAGE='ACP',\n    DATAFILETYPE='widechar',\n    FIELDTERMINATOR='|',\n    ROWTERMINATOR='\\n',\n    KEEPIDENTITY,\n    TABLOCK\n);\n\nPRINT 'Loading [dbo].[sysdiagrams]';\n\nBULK INSERT [dbo].[sysdiagrams] FROM '$(SqlSamplesSourceDataPath)sysdiagrams.csv'\nWITH (\n    CHECK_CONSTRAINTS,\n    --CODEPAGE='ACP',\n    DATAFILETYPE='widechar',\n    FIELDTERMINATOR='|',\n    ROWTERMINATOR='\\n',\n    KEEPIDENTITY,\n    TABLOCK\n);\n\n\n\n\n-- ******************************************************\n-- Add Primary Keys\n-- ******************************************************\nPRINT '';\nPRINT '*** Adding Primary Keys';\nGO\n\nSET QUOTED_IDENTIFIER ON;\n\n\nALTER TABLE [dbo].[sysdiagrams] WITH CHECK ADD \n    CONSTRAINT [PK__sysdiagr__C2B05B616B24EA82] PRIMARY KEY CLUSTERED\n\t(\n\t[diagram_id]\n\t) ON [PRIMARY];\nGO\n\nALTER TABLE [dbo].[DimAccount] WITH CHECK ADD \n    CONSTRAINT [PK_DimAccount] PRIMARY KEY CLUSTERED\n\t(\n\t[AccountKey]\n\t) ON [PRIMARY];\nGO\n\n\nALTER TABLE [dbo].[DimCurrency] WITH CHECK ADD \n    CONSTRAINT [PK_DimCurrency_CurrencyKey] PRIMARY KEY CLUSTERED \n    (\n       [CurrencyKey]\n    )  ON [PRIMARY];\nGO\n\nALTER TABLE [dbo].[DimCustomer] WITH CHECK ADD \n    CONSTRAINT [PK_DimCustomer_CustomerKey] PRIMARY KEY CLUSTERED\n    (\n        [CustomerKey]\n    )  ON [PRIMARY];\nGO\n\n\nALTER TABLE [dbo].[DimDate] WITH CHECK ADD \n    CONSTRAINT [PK_DimDate_DateKey] PRIMARY KEY CLUSTERED \n    (\n        [DateKey]\n    )  ON [PRIMARY];\nGO\n\nALTER TABLE [dbo].[DimDepartmentGroup] WITH CHECK ADD \n    CONSTRAINT [PK_DimDepartmentGroup] PRIMARY KEY CLUSTERED \n    (\n        [DepartmentGroupKey]\n    )  ON [PRIMARY];\nGO\n\nALTER TABLE [dbo].[DimEmployee] WITH CHECK ADD \n    CONSTRAINT [PK_DimEmployee_EmployeeKey] PRIMARY KEY CLUSTERED \n    (\n       [EmployeeKey]\n    )  ON [PRIMARY];\nGO\n\nALTER TABLE [dbo].[DimGeography] WITH CHECK ADD \n    CONSTRAINT [PK_DimGeography_GeographyKey] PRIMARY KEY CLUSTERED \n    (\n       [GeographyKey]\n    )  ON [PRIMARY];\nGO\n\nALTER TABLE [dbo].[DimOrganization] WITH CHECK ADD \n    CONSTRAINT [PK_DimOrganization] PRIMARY KEY CLUSTERED \n    (\n       [OrganizationKey]\n    )  ON [PRIMARY];\nGO\n\nALTER TABLE [dbo].[DimProduct] WITH CHECK ADD \n    CONSTRAINT [PK_DimProduct_ProductKey] PRIMARY KEY CLUSTERED \n    (\n        [ProductKey]\n    )  ON [PRIMARY];\nGO\n\nALTER TABLE [dbo].[DimProductCategory] WITH CHECK ADD \n    CONSTRAINT [PK_DimProductCategory_ProductCategoryKey] PRIMARY KEY CLUSTERED \n    (\n        [ProductCategoryKey]\n    )  ON [PRIMARY];\nGO\n\nALTER TABLE [dbo].[DimProductSubcategory] WITH CHECK ADD \n    CONSTRAINT [PK_DimProductSubcategory_ProductSubcategoryKey] PRIMARY KEY CLUSTERED \n    (\n        [ProductSubcategoryKey]\n    )  ON [PRIMARY];\nGO\n\nALTER TABLE [dbo].[DimPromotion] WITH CHECK ADD \n    CONSTRAINT [PK_DimPromotion_PromotionKey] PRIMARY KEY CLUSTERED \n    (\n       [PromotionKey]\n    )  ON [PRIMARY];\nGO\n\nALTER TABLE [dbo].[DimReseller] WITH CHECK ADD \n    CONSTRAINT [PK_DimReseller_ResellerKey] PRIMARY KEY CLUSTERED \n    (\n        [ResellerKey]\n    )  ON [PRIMARY];\nGO\n\nALTER TABLE [dbo].[DimSalesReason] WITH CHECK ADD \n    CONSTRAINT [PK_DimSalesReason_SalesReasonKey] PRIMARY KEY CLUSTERED \n    (\n        [SalesReasonKey]\n    )  ON [PRIMARY];\nGO\n\nALTER TABLE [dbo].[DatabaseLog] WITH CHECK ADD \n    CONSTRAINT [PK_DatabaseLog_DatabaseLogID] PRIMARY KEY NONCLUSTERED \n    (\n        [DatabaseLogID]\n    )  ON [PRIMARY];\nGO\n\nALTER TABLE [dbo].[DimSalesTerritory] WITH CHECK ADD \n    CONSTRAINT [PK_DimSalesTerritory_SalesTerritoryKey] PRIMARY KEY CLUSTERED \n    (\n        [SalesTerritoryKey]\n    )  ON [PRIMARY];\nGO\n\nALTER TABLE [dbo].[DimScenario] WITH CHECK ADD \n    CONSTRAINT [PK_DimScenario] PRIMARY KEY CLUSTERED \n    (\n        [ScenarioKey]\n    )  ON [PRIMARY];\nGO\n\nALTER TABLE [dbo].[FactAdditionalInternationalProductDescription] WITH CHECK ADD \n    CONSTRAINT [PK_FactAdditionalInternationalProductDescription_ProductKey_CultureName] PRIMARY KEY CLUSTERED \n    (\n       [ProductKey],[CultureName]\n    )  ON [PRIMARY];\nGO\n\nALTER TABLE [dbo].[FactCallCenter] WITH CHECK ADD \n    CONSTRAINT [PK_FactCallCenter_FactCallCenterID] PRIMARY KEY CLUSTERED \n    (\n        [FactCallCenterID]\n    )  ON [PRIMARY];\nGO\n\nALTER TABLE [dbo].[FactCurrencyRate] WITH CHECK ADD \n    CONSTRAINT [PK_FactCurrencyRate_CurrencyKey_DateKey] PRIMARY KEY CLUSTERED \n    (\n      [CurrencyKey], [DateKey]\n    )  ON [PRIMARY];\nGO\n\nALTER TABLE [dbo].[FactInternetSales] WITH CHECK ADD \n    CONSTRAINT [PK_FactInternetSales_SalesOrderNumber_SalesOrderLineNumber] PRIMARY KEY CLUSTERED \n    (\n        [SalesOrderNumber], [SalesOrderLineNumber]\n    )  ON [PRIMARY];\nGO\n\n\nALTER TABLE [dbo].[FactInternetSalesReason] WITH CHECK ADD \n    CONSTRAINT [PK_FactInternetSalesReason_SalesOrderNumber_SalesOrderLineNumber_SalesReasonKey] PRIMARY KEY CLUSTERED \n    (\n        [SalesOrderNumber], [SalesOrderLineNumber], [SalesReasonKey]\n    )  ON [PRIMARY];\nGO\n\nALTER TABLE [dbo].[FactProductInventory] WITH CHECK ADD \n    CONSTRAINT [PK_FactProductInventory] PRIMARY KEY CLUSTERED \n    (\n        [ProductKey], [DateKey]\n    )  ON [PRIMARY];\nGO\n\nALTER TABLE [dbo].[FactResellerSales] WITH CHECK ADD \n    CONSTRAINT [PK_FactResellerSales_SalesOrderNumber_SalesOrderLineNumber] PRIMARY KEY CLUSTERED \n    (\n        [SalesOrderNumber], [SalesOrderLineNumber]\n    )  ON [PRIMARY];\nGO\n\nALTER TABLE [dbo].[FactSalesQuota] WITH CHECK ADD \n    CONSTRAINT [PK_FactSalesQuota_SalesQuotaKey] PRIMARY KEY CLUSTERED \n    (\n       [SalesQuotaKey]\n    )  ON [PRIMARY];\nGO\n\nALTER TABLE [dbo].[FactSurveyResponse] WITH CHECK ADD \n    CONSTRAINT [PK_FactSurveyResponse_SurveyResponseKey] PRIMARY KEY CLUSTERED \n    (\n        [SurveyResponseKey]\n    )  ON [PRIMARY];\nGO\n\nALTER TABLE [dbo].[ProspectiveBuyer] WITH CHECK ADD \n    CONSTRAINT [PK_ProspectiveBuyer_ProspectiveBuyerKey] PRIMARY KEY CLUSTERED \n    (\n        [ProspectiveBuyerKey]\n    )  ON [PRIMARY];\nGO\n\n\n-- ******************************************************\n-- Add Indexes\n-- ******************************************************\nPRINT '';\nPRINT '*** Adding Indexes';\nGO\n\nCREATE UNIQUE NONCLUSTERED INDEX [AK_DimCurrency_CurrencyAlternateKey] ON [dbo].[DimCurrency]([CurrencyAlternateKey]) ON [PRIMARY];\nGO\n\nCREATE UNIQUE NONCLUSTERED INDEX [IX_DimCustomer_CustomerAlternateKey] ON [dbo].[DimCustomer]([CustomerAlternateKey]) ON [PRIMARY];\nGO\n\nCREATE UNIQUE NONCLUSTERED INDEX [AK_DimDate_FullDateAlternateKey] ON [dbo].[DimDate]( [FullDateAlternateKey]) ON [PRIMARY];\nGO\n\n\n/****** Object:  Index [AK_DimProduct_ProductAlternateKey_StartDate]    Script Date: 7/8/2016 2:39:08 PM ******/\nALTER TABLE [dbo].[DimProduct] ADD  CONSTRAINT [AK_DimProduct_ProductAlternateKey_StartDate] UNIQUE NONCLUSTERED \n(\n\t[ProductAlternateKey] ASC,\n\t[StartDate] ASC\n)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)\nGO\n\n\n\n/****** Object:  Index [AK_DimProductCategory_ProductCategoryAlternateKey]    Script Date: 7/8/2016 2:40:13 PM ******/\nALTER TABLE [dbo].[DimProductCategory] ADD  CONSTRAINT [AK_DimProductCategory_ProductCategoryAlternateKey] UNIQUE NONCLUSTERED \n(\n\t[ProductCategoryAlternateKey] ASC\n)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)\nGO\n\n\n/****** Object:  Index [AK_DimProductSubcategory_ProductSubcategoryAlternateKey]    Script Date: 7/8/2016 2:40:37 PM ******/\nALTER TABLE [dbo].[DimProductSubcategory] ADD  CONSTRAINT [AK_DimProductSubcategory_ProductSubcategoryAlternateKey] UNIQUE NONCLUSTERED \n(\n\t[ProductSubcategoryAlternateKey] ASC\n)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)\nGO\n\n\n/****** Object:  Index [AK_DimPromotion_PromotionAlternateKey]    Script Date: 7/8/2016 2:41:46 PM ******/\nALTER TABLE [dbo].[DimPromotion] ADD  CONSTRAINT [AK_DimPromotion_PromotionAlternateKey] UNIQUE NONCLUSTERED \n(\n\t[PromotionAlternateKey] ASC\n)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)\nGO\n\n\n/****** Object:  Index [AK_DimReseller_ResellerAlternateKey]    Script Date: 7/8/2016 2:42:07 PM ******/\nALTER TABLE [dbo].[DimReseller] ADD  CONSTRAINT [AK_DimReseller_ResellerAlternateKey] UNIQUE NONCLUSTERED \n(\n\t[ResellerAlternateKey] ASC\n)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)\nGO\n\n/****** Object:  Index [AK_DimSalesTerritory_SalesTerritoryAlternateKey]    Script Date: 7/8/2016 2:43:13 PM ******/\nALTER TABLE [dbo].[DimSalesTerritory] ADD  CONSTRAINT [AK_DimSalesTerritory_SalesTerritoryAlternateKey] UNIQUE NONCLUSTERED \n(\n\t[SalesTerritoryAlternateKey] ASC\n)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)\nGO\n\n\n/****** Object:  Index [AK_FactCallCenter_DateKey_Shift]    Script Date: 7/8/2016 2:43:49 PM ******/\nALTER TABLE [dbo].[FactCallCenter] ADD  CONSTRAINT [AK_FactCallCenter_DateKey_Shift] UNIQUE NONCLUSTERED \n(\n\t[DateKey] ASC,\n\t[Shift] ASC\n)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)\nGO\n\n\n\nCREATE UNIQUE NONCLUSTERED INDEX [UK_principal_name] ON [dbo].[sysdiagrams]([principal_id],\t[name]) ON [PRIMARY];\nGO\n\n\n-- ****************************************\n-- Create Foreign key constraints\n-- ****************************************\nPRINT '';\nPRINT '*** Creating Foreign Key Constraints';\nGO\n\nALTER TABLE [dbo].[DimAccount] ADD \n    CONSTRAINT [FK_DimAccount_DimAccount] FOREIGN KEY \n    (\n        [ParentAccountKey]\n    ) REFERENCES [dbo].[DimAccount] ([AccountKey]);\nGO\n\nALTER TABLE [dbo].[DimCustomer] ADD\n\tCONSTRAINT [FK_DimCustomer_DimGeography] FOREIGN KEY\n\t(\n\t\t[GeographyKey]\n\t)\n\tREFERENCES [dbo].[DimGeography] ([GeographyKey])\n\nALTER TABLE [dbo].[DimDepartmentGroup] ADD \n    CONSTRAINT [FK_DimDepartmentGroup_DimDepartmentGroup] FOREIGN KEY \n    (\n        [ParentDepartmentGroupKey]\n    ) REFERENCES [dbo].[DimDepartmentGroup] ([DepartmentGroupKey]);\nGO\n\nALTER TABLE [dbo].[DimEmployee] ADD \n    CONSTRAINT [FK_DimEmployee_DimSalesTerritory] FOREIGN KEY \n    (\n        [SalesTerritoryKey]\n    ) REFERENCES [dbo].[DimSalesTerritory] ([SalesTerritoryKey]),\n\tCONSTRAINT [FK_DimEmployee_DimEmployee] FOREIGN KEY \n    (\n        [ParentEmployeeKey]\n    ) REFERENCES [dbo].[DimEmployee] ([EmployeeKey]);\nGO\n\nALTER TABLE [dbo].[DimGeography] ADD\n    CONSTRAINT [FK_DimGeography_DimSalesTerritory]  FOREIGN KEY \n    (\n        [SalesTerritoryKey]\n    ) REFERENCES [dbo].[DimSalesTerritory] ([SalesTerritoryKey]);\nGO\n    \n\nALTER TABLE [dbo].[DimOrganization] ADD \n    CONSTRAINT [FK_DimOrganization_DimCurrency] FOREIGN KEY \n    (\n        [CurrencyKey]\n    ) REFERENCES [dbo].[DimCurrency] ([CurrencyKey]),\n    CONSTRAINT [FK_DimOrganization_DimOrganization] FOREIGN KEY \n    (\n        [ParentOrganizationKey]\n    )REFERENCES [dbo].[DimOrganization] ([OrganizationKey]);\nGO\n\n\nALTER TABLE [dbo].[DimProduct] ADD \n    CONSTRAINT [FK_DimProduct_DimProductSubcategory] FOREIGN KEY \n    (\n        [ProductSubcategoryKey]\n    ) REFERENCES [dbo].[DimProductSubcategory] ([ProductSubcategoryKey]);\nGO\n\n\nALTER TABLE [dbo].[DimProductSubcategory] ADD \n    CONSTRAINT [FK_DimProductSubcategory_DimProductCategory] FOREIGN KEY \n    (\n        [ProductCategoryKey]\n    ) REFERENCES [dbo].[DimProductCategory] ([ProductCategoryKey]);\nGO\n\nALTER TABLE [dbo].[DimReseller] ADD\n\tCONSTRAINT [FK_DimReseller_DimGeography] FOREIGN KEY\n\t(\n\t\t[GeographyKey]\n\t) REFERENCES [dbo].[DimGeography] ([GeographyKey]);\nGO\n\n\nALTER TABLE [dbo].[FactCallCenter] ADD \n    CONSTRAINT [FK_FactCallCenter_DimDate] FOREIGN KEY \n    (\n        [DateKey]\n    ) REFERENCES [dbo].[DimDate] ([DateKey]);\nGO\n\n\nALTER TABLE [dbo].[FactCurrencyRate] ADD \n    CONSTRAINT [FK_FactCurrencyRate_DimDate] FOREIGN KEY \n    (\n       [DateKey]\n    ) REFERENCES [dbo].[DimDate] ([DateKey]),\n\tCONSTRAINT [FK_FactCurrencyRate_DimCurrency] FOREIGN KEY \n    (\n       [CurrencyKey]\n    ) REFERENCES [dbo].[DimCurrency] ([CurrencyKey]);\nGO\n\nALTER TABLE [dbo].[FactFinance] ADD \n    CONSTRAINT [FK_FactFinance_DimScenario] FOREIGN KEY \n    (\n        [ScenarioKey]\n    ) REFERENCES [dbo].[DimScenario] ([ScenarioKey]),\n    CONSTRAINT [FK_FactFinance_DimOrganization] FOREIGN KEY \n    (\n        [OrganizationKey]\n    ) REFERENCES [dbo].[DimOrganization] ([OrganizationKey]),\n    CONSTRAINT [FK_FactFinance_DimDepartmentGroup] FOREIGN KEY \n    (\n        [DepartmentGroupKey]\n    ) REFERENCES [dbo].[DimDepartmentGroup] ([DepartmentGroupKey]),\n\tCONSTRAINT [FK_FactFinance_DimDate] FOREIGN KEY \n    (\n        [DateKey]\n    ) REFERENCES [dbo].[DimDate] ([DateKey]),\n\tCONSTRAINT [FK_FactFinance_DimAccount] FOREIGN KEY \n    (\n        [AccountKey]\n    ) REFERENCES [dbo].[DimAccount] ([AccountKey])\t\n\t;\nGO\n\nALTER TABLE [dbo].[FactInternetSales] ADD \n    CONSTRAINT [FK_FactInternetSales_DimCurrency] FOREIGN KEY \n    (\n        [CurrencyKey]\n    ) REFERENCES [dbo].[DimCurrency] ([CurrencyKey]),\n\t CONSTRAINT [FK_FactInternetSales_DimCustomer] FOREIGN KEY \n    (\n        [CustomerKey]\n    ) REFERENCES [dbo].[DimCustomer] ([CustomerKey]),\n\t CONSTRAINT [FK_FactInternetSales_DimDate] FOREIGN KEY \n    (\n        [OrderDateKey]\n    ) REFERENCES [dbo].[DimDate] ([DateKey]),\n\t CONSTRAINT [FK_FactInternetSales_DimDate1] FOREIGN KEY \n    (\n        [DueDateKey]\n    ) REFERENCES [dbo].[DimDate] ([DateKey]),\n\t CONSTRAINT [FK_FactInternetSales_DimDate2] FOREIGN KEY \n    (\n        [ShipDateKey]\n    ) REFERENCES [dbo].[DimDate] ([DateKey]),\n\t CONSTRAINT [FK_FactInternetSales_DimProduct] FOREIGN KEY \n    (\n        [ProductKey]\n    ) REFERENCES [dbo].[DimProduct] ([ProductKey]),\n\tCONSTRAINT [FK_FactInternetSales_DimPromotion] FOREIGN KEY \n    (\n        [PromotionKey]\n    ) REFERENCES [dbo].[DimPromotion] ([PromotionKey]),\n\tCONSTRAINT [FK_FactInternetSales_DimSalesTerritory] FOREIGN KEY \n    (\n        [SalesTerritoryKey]\n    ) REFERENCES [dbo].[DimSalesTerritory] ([SalesTerritoryKey]);\nGO\n\nALTER TABLE [dbo].[FactInternetSalesReason] ADD \n    CONSTRAINT [FK_FactInternetSalesReason_FactInternetSales] FOREIGN KEY \n    (\n        [SalesOrderNumber], [SalesOrderLineNumber]\n    ) REFERENCES [dbo].[FactInternetSales] ([SalesOrderNumber], [SalesOrderLineNumber]),\n\tCONSTRAINT [FK_FactInternetSalesReason_DimSalesReason] FOREIGN KEY\n\t(\n\t\t[SalesReasonKey]\n\t) REFERENCES [dbo].[DimSalesReason] ([SalesReasonKey]);\nGO\n\n\nALTER TABLE [dbo].[FactProductInventory] ADD \n    CONSTRAINT [FK_FactProductInventory_DimDate] FOREIGN KEY \n    (\n        [DateKey]\n    )REFERENCES [dbo].[DimDate] ([DateKey]),\n\tCONSTRAINT [FK_FactProductInventory_DimProduct] FOREIGN KEY\n\t(\n\t\t[ProductKey]\n\t) REFERENCES [dbo].[DimProduct] ([ProductKey]);\nGO\n\n\n\n\nALTER TABLE [dbo].[FactResellerSales] ADD \n    CONSTRAINT [FK_FactResellerSales_DimCurrency] FOREIGN KEY([CurrencyKey])\n\t\t\tREFERENCES [dbo].[DimCurrency] ([CurrencyKey]),\n\tCONSTRAINT [FK_FactResellerSales_DimDate] FOREIGN KEY([OrderDateKey])\n\t\t\tREFERENCES [dbo].[DimDate] ([DateKey]),\n\tCONSTRAINT [FK_FactResellerSales_DimDate1] FOREIGN KEY([DueDateKey])\n\t\t\tREFERENCES [dbo].[DimDate] ([DateKey]),\n\tCONSTRAINT [FK_FactResellerSales_DimDate2] FOREIGN KEY([ShipDateKey])\n\t\t\tREFERENCES [dbo].[DimDate] ([DateKey]),\n\tCONSTRAINT [FK_FactResellerSales_DimEmployee] FOREIGN KEY([EmployeeKey])\n\t\t\tREFERENCES [dbo].[DimEmployee] ([EmployeeKey]),\n\tCONSTRAINT [FK_FactResellerSales_DimProduct] FOREIGN KEY([ProductKey])\n\t\t\tREFERENCES [dbo].[DimProduct] ([ProductKey]),\n\tCONSTRAINT [FK_FactResellerSales_DimPromotion] FOREIGN KEY([PromotionKey])\n\t\t\tREFERENCES [dbo].[DimPromotion] ([PromotionKey]),\n\tCONSTRAINT [FK_FactResellerSales_DimReseller] FOREIGN KEY([ResellerKey])\n\t\t\tREFERENCES [dbo].[DimReseller] ([ResellerKey]),\n\tCONSTRAINT [FK_FactResellerSales_DimSalesTerritory] FOREIGN KEY([SalesTerritoryKey])\n\t\t\tREFERENCES [dbo].[DimSalesTerritory] ([SalesTerritoryKey]);\nGO\n\nALTER TABLE [dbo].[FactSalesQuota] ADD \n    CONSTRAINT [FK_FactSalesQuota_DimEmployee] FOREIGN KEY([EmployeeKey])\n\t\t\tREFERENCES [dbo].[DimEmployee] ([EmployeeKey]),\n    CONSTRAINT [FK_FactSalesQuota_DimDate] FOREIGN KEY([DateKey])\n\t\t\tREFERENCES [dbo].[DimDate] ([DateKey]);\nGO\n\n\nALTER TABLE [dbo].[FactSurveyResponse]  ADD \n    CONSTRAINT [FK_FactSurveyResponse_DateKey] FOREIGN KEY([DateKey])\n\t\t\tREFERENCES [dbo].[DimDate] ([DateKey]),\n\tCONSTRAINT [FK_FactSurveyResponse_CustomerKey] FOREIGN KEY([CustomerKey])\n\t\t\tREFERENCES [dbo].[DimCustomer] ([CustomerKey]);\nGO\n\n  \n\n-- ******************************************************\n-- Add database views.\n-- ******************************************************\nPRINT '';\nPRINT '*** Creating Table Views';\nGO\n\n\n-- vDMPrep will be used as a data source by the other data mining views.  \n-- Uses DW data at customer, product, day, etc. granularity and\n-- gets region, model, year, month, etc.\nCREATE VIEW [dbo].[vDMPrep]\nAS\n    SELECT\n        pc.[EnglishProductCategoryName]\n        ,Coalesce(p.[ModelName], p.[EnglishProductName]) AS [Model]\n        ,c.[CustomerKey]\n        ,s.[SalesTerritoryGroup] AS [Region]\n        ,CASE\n            WHEN Month(GetDate()) < Month(c.[BirthDate])\n                THEN DateDiff(yy,c.[BirthDate],GetDate()) - 1\n            WHEN Month(GetDate()) = Month(c.[BirthDate])\n            AND Day(GetDate()) < Day(c.[BirthDate])\n                THEN DateDiff(yy,c.[BirthDate],GetDate()) - 1\n            ELSE DateDiff(yy,c.[BirthDate],GetDate())\n        END AS [Age]\n        ,CASE\n            WHEN c.[YearlyIncome] < 40000 THEN 'Low'\n            WHEN c.[YearlyIncome] > 60000 THEN 'High'\n            ELSE 'Moderate'\n        END AS [IncomeGroup]\n        ,d.[CalendarYear]\n        ,d.[FiscalYear]\n        ,d.[MonthNumberOfYear] AS [Month]\n        ,f.[SalesOrderNumber] AS [OrderNumber]\n        ,f.SalesOrderLineNumber AS LineNumber\n        ,f.OrderQuantity AS Quantity\n        ,f.ExtendedAmount AS Amount  \n    FROM\n        [dbo].[FactInternetSales] f\n    INNER JOIN [dbo].[DimDate] d\n        ON f.[OrderDateKey] = d.[DateKey]\n    INNER JOIN [dbo].[DimProduct] p\n        ON f.[ProductKey] = p.[ProductKey]\n    INNER JOIN [dbo].[DimProductSubcategory] psc\n        ON p.[ProductSubcategoryKey] = psc.[ProductSubcategoryKey]\n    INNER JOIN [dbo].[DimProductCategory] pc\n        ON psc.[ProductCategoryKey] = pc.[ProductCategoryKey]\n    INNER JOIN [dbo].[DimCustomer] c\n        ON f.[CustomerKey] = c.[CustomerKey]\n    INNER JOIN [dbo].[DimGeography] g\n        ON c.[GeographyKey] = g.[GeographyKey]\n    INNER JOIN [dbo].[DimSalesTerritory] s\n        ON g.[SalesTerritoryKey] = s.[SalesTerritoryKey] \n;\n\nGO\n/****** Object:  View [dbo].[vTimeSeries]    Script Date: 7/8/2016 3:09:56 PM ******/\nSET ANSI_NULLS ON\nGO\nSET QUOTED_IDENTIFIER ON\nGO\n\n\n-- vTimeSeries view supports the creation of time series data mining models.\n--      - Replaces earlier bike models with successor models.\n--      - Abbreviates model names to improve readability in mining model viewer\n--      - Concatenates model and region so that table only has one input.\n--      - Creates a date field indexed to monthly reporting date for use in prediction.\nCREATE VIEW [dbo].[vTimeSeries] \nAS\n    SELECT \n        CASE [Model] \n            WHEN 'Mountain-100' THEN 'M200' \n            WHEN 'Road-150' THEN 'R250' \n            WHEN 'Road-650' THEN 'R750' \n            WHEN 'Touring-1000' THEN 'T1000' \n            ELSE Left([Model], 1) + Right([Model], 3) \n        END + ' ' + [Region] AS [ModelRegion] \n        ,(Convert(Integer, [CalendarYear]) * 100) + Convert(Integer, [Month]) AS [TimeIndex] \n        ,Sum([Quantity]) AS [Quantity] \n        ,Sum([Amount]) AS [Amount]\n\t\t,CalendarYear\n\t\t,[Month]\n\t\t,[dbo].[udfBuildISO8601Date] ([CalendarYear], [Month], 25)\n\t\tas ReportingDate\n    FROM \n        [dbo].[vDMPrep] \n    WHERE \n        [Model] IN ('Mountain-100', 'Mountain-200', 'Road-150', 'Road-250', \n            'Road-650', 'Road-750', 'Touring-1000') \n    GROUP BY \n        CASE [Model] \n            WHEN 'Mountain-100' THEN 'M200' \n            WHEN 'Road-150' THEN 'R250' \n            WHEN 'Road-650' THEN 'R750' \n            WHEN 'Touring-1000' THEN 'T1000' \n            ELSE Left(Model,1) + Right(Model,3) \n        END + ' ' + [Region] \n        ,(Convert(Integer, [CalendarYear]) * 100) + Convert(Integer, [Month])\n\t\t,CalendarYear\n\t\t,[Month]\n\t\t,[dbo].[udfBuildISO8601Date] ([CalendarYear], [Month], 25);\n\nGO\n/****** Object:  View [dbo].[vTargetMail]    Script Date: 7/8/2016 3:09:56 PM ******/\nSET ANSI_NULLS ON\nGO\nSET QUOTED_IDENTIFIER ON\nGO\n\n-- vTargetMail supports targeted mailing data model\n-- Uses vDMPrep to determine if a customer buys a bike and joins to DimCustomer\nCREATE VIEW [dbo].[vTargetMail] \nAS\n    SELECT\n        c.[CustomerKey], \n        c.[GeographyKey], \n        c.[CustomerAlternateKey], \n        c.[Title], \n        c.[FirstName], \n        c.[MiddleName], \n        c.[LastName], \n        c.[NameStyle], \n        c.[BirthDate], \n        c.[MaritalStatus], \n        c.[Suffix], \n        c.[Gender], \n        c.[EmailAddress], \n        c.[YearlyIncome], \n        c.[TotalChildren], \n        c.[NumberChildrenAtHome], \n        c.[EnglishEducation], \n        c.[SpanishEducation], \n        c.[FrenchEducation], \n        c.[EnglishOccupation], \n        c.[SpanishOccupation], \n        c.[FrenchOccupation], \n        c.[HouseOwnerFlag], \n        c.[NumberCarsOwned], \n        c.[AddressLine1], \n        c.[AddressLine2], \n        c.[Phone], \n        c.[DateFirstPurchase], \n        c.[CommuteDistance], \n        x.[Region], \n        x.[Age], \n        CASE x.[Bikes] \n            WHEN 0 THEN 0 \n            ELSE 1 \n        END AS [BikeBuyer]\n    FROM\n        [dbo].[DimCustomer] c INNER JOIN (\n            SELECT\n                [CustomerKey]\n                ,[Region]\n                ,[Age]\n                ,Sum(\n                    CASE [EnglishProductCategoryName] \n                        WHEN 'Bikes' THEN 1 \n                        ELSE 0 \n                    END) AS [Bikes]\n            FROM\n                [dbo].[vDMPrep] \n            GROUP BY\n                [CustomerKey]\n                ,[Region]\n                ,[Age]\n            ) AS [x]\n        ON c.[CustomerKey] = x.[CustomerKey]\n;\n\nGO\n/****** Object:  View [dbo].[vAssocSeqOrders]    Script Date: 7/8/2016 3:09:56 PM ******/\nSET ANSI_NULLS ON\nGO\nSET QUOTED_IDENTIFIER ON\nGO\n/* vAssocSeqOrders supports assocation and sequence clustering data mmining models.\n      - Limits data to FY2004.\n      - Creates order case table and line item nested table.*/\nCREATE VIEW [dbo].[vAssocSeqOrders]\nAS\nSELECT DISTINCT OrderNumber, CustomerKey, Region, IncomeGroup\nFROM         dbo.vDMPrep\nWHERE     (FiscalYear = '2013')\n\nGO\n/****** Object:  View [dbo].[vAssocSeqLineItems]    Script Date: 7/8/2016 3:09:56 PM ******/\nSET ANSI_NULLS ON\nGO\nSET QUOTED_IDENTIFIER ON\nGO\nCREATE VIEW [dbo].[vAssocSeqLineItems]\nAS\nSELECT     OrderNumber, LineNumber, Model\nFROM         dbo.vDMPrep\nWHERE     (FiscalYear = '2013')\nGO\n\n\n\n-- ****************************************\n-- Drop DDL Trigger for Database\n-- ****************************************\nPRINT '';\nPRINT '*** Disabling DDL Trigger for Database';\nGO\n\nDISABLE TRIGGER [ddlDatabaseTriggerLog] \nON DATABASE;\nGO\n\nUSE [master];\nGO\n\nPRINT 'Finished - ' + CONVERT(varchar, GETDATE(), 121);\nGO\n\nSET NOEXEC OFF",
			"metadata": {
				"language": "sql"
			},
			"currentConnection": {
				"databaseName": "master",
				"poolName": "DedicatedPool2"
			},
			"resultLimit": 5000
		},
		"type": "SqlQuery"
	}
}